type Archive = record { canister_id : principal };
type Archives = record { archives : vec Archive };
type Block = record {
  transaction : Transaction;
  timestamp : TimeStamp;
  parent_hash : opt blob;
};
type BlockRange = record { blocks : vec Block };
type ExecuteTransferResult = variant { Ok : TransferResult; Err : text };
type GetAccountBalanceResult = variant { Ok : Tokens; Err : text };
type GetArchivesResult = variant { Ok : Archives; Err : text };
type GetBlocksArgs = record { start : nat64; length : nat64 };
type GetBlocksResult = variant { Ok : QueryBlocksResponse; Err : text };
type GetDecimalsResult = variant { Ok : nat32; Err : text };
type GetNameResult = variant { Ok : text; Err : text };
type GetTransferFeeResult = variant { Ok : TransferFee; Err : text };
type Operation = variant {
  Burn : Operation_Burn;
  Mint : Operation_Mint;
  Transfer : Operation_Transfer;
};
type Operation_Burn = record { from : blob; amount : Tokens };
type Operation_Mint = record { to : blob; amount : Tokens };
type Operation_Transfer = record {
  to : blob;
  fee : Tokens;
  from : blob;
  amount : Tokens;
};
type QueryArchiveError = variant {
  BadFirstBlockIndex : QueryArchiveError_BadFirstBlockIndex;
  Other : QueryArchiveError_Other;
};
type QueryArchiveError_BadFirstBlockIndex = record {
  requested_index : nat64;
  first_valid_index : nat64;
};
type QueryArchiveError_Other = record {
  error_message : text;
  error_code : nat64;
};
type QueryArchiveResult = variant { Ok : BlockRange; Err : QueryArchiveError };
type QueryBlocksResponse = record {
  certificate : opt blob;
  blocks : vec Block;
  chain_length : nat64;
  first_block_index : nat64;
  archived_blocks : vec QueryBlocksResponse_archived_blocks;
};
type QueryBlocksResponse_archived_blocks = record {
  callback : func (GetBlocksArgs) -> (QueryArchiveResult) query;
  start : nat64;
  length : nat64;
};
type TimeStamp = record { timestamp_nanos : nat64 };
type Tokens = record { e8s : nat64 };
type Transaction = record {
  memo : nat64;
  operation : opt Operation;
  created_at_time : TimeStamp;
};
type TransferError = variant {
  TxTooOld : TransferError_TxTooOld;
  BadFee : TransferError_BadFee;
  TxDuplicate : TransferError_TxDuplicate;
  TxCreatedInFuture;
  InsufficientFunds : TransferError_InsufficientFunds;
};
type TransferError_BadFee = record { expected_fee : Tokens };
type TransferError_InsufficientFunds = record { balance : Tokens };
type TransferError_TxDuplicate = record { duplicate_of : nat64 };
type TransferError_TxTooOld = record { allowed_window_nanos : nat64 };
type TransferFee = record { transfer_fee : Tokens };
type TransferResult = variant { Ok : nat64; Err : TransferError };
service : (principal) -> {
  execute_transfer : (text, nat64, nat64, opt nat64) -> (ExecuteTransferResult);
  get_account_balance : (text) -> (GetAccountBalanceResult);
  get_address_from_principal : (principal) -> (text) query;
  get_archives : () -> (GetArchivesResult);
  get_blocks : (GetBlocksArgs) -> (GetBlocksResult);
  get_decimals : () -> (GetDecimalsResult);
  get_name : () -> (GetNameResult);
  get_symbol : () -> (GetNameResult);
  get_transfer_fee : () -> (GetTransferFeeResult);
}
