type ComplexFunc = func (
    record {
      id : text;
      basic_func : func (text) -> (text) query;
      complex_func : ComplexFunc;
    },
    variant {
      Bad;
      ComplexFunc : ComplexFunc;
      Good;
      BasicFunc : func (text) -> (text) query;
    },
  ) -> (nat64);
type GetNotifierFromNotifiersCanisterResult = variant {
  Ok : func (blob) -> () oneway;
  Err : text;
};
type Reaction = variant {
  Bad;
  ComplexFunc : ComplexFunc;
  Good;
  BasicFunc : func (text) -> (text) query;
};
type User = record {
  id : text;
  basic_func : func (text) -> (text) query;
  complex_func : ComplexFunc;
};
service : (principal) -> {
  basic_func_param : (func (text) -> (text) query) -> (
      func (text) -> (text) query,
    ) query;
  basic_func_param_array : (vec func (text) -> (text) query) -> (
      vec func (text) -> (text) query,
    ) query;
  basic_func_return_type : () -> (func (text) -> (text) query) query;
  basic_func_return_type_array : () -> (vec func (text) -> (text) query) query;
  complex_func_param : (func (User, Reaction) -> (nat64)) -> (
      func (User, Reaction) -> (nat64),
    ) query;
  complex_func_return_type : () -> (func (User, Reaction) -> (nat64)) query;
  get_notifier_from_notifiers_canister : () -> (
      GetNotifierFromNotifiersCanisterResult,
    );
  get_stable_func : () -> (func (nat64, text) -> () query) query;
  null_func_param : (
      func (opt null, vec null, null, vec vec null, vec opt null) -> (
          null,
        ) query,
    ) -> (
      func (opt null, vec null, null, vec vec null, vec opt null) -> (
          null,
        ) query,
    ) query;
}
