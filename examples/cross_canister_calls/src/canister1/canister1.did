type Account = record { id : text; balance : nat64 };
type AccountArgs = record { id : text };
type AccountResult = variant { Ok : opt Account; Err : text };
type AccountsResult = variant { Ok : vec Account; Err : text };
type BalanceResult = variant { Ok : nat64; Err : text };
type NotifyResult = variant { Ok; Err : RejectionCode };
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type TrapResult = variant { Ok : text; Err : text };
service : (principal) -> {
  account : (AccountArgs) -> (AccountResult);
  accounts : () -> (AccountsResult);
  balance : (text) -> (BalanceResult);
  send_notification : () -> (NotifyResult);
  transfer : (text, text, nat64) -> (BalanceResult);
  trap : () -> (TrapResult);
}
