type CreateRecordingErr = variant { UserDoesNotExist : principal };
type CreateRecordingResult = variant {
  Ok : Recording;
  Err : CreateRecordingErr;
};
type DeleteRecordingError = variant {
  RecordingDoesNotExist : principal;
  UserDoesNotExist : principal;
};
type DeleteRecordingResult = variant {
  Ok : Recording;
  Err : DeleteRecordingError;
};
type DeleteUserErr = variant { UserDoesNotExist : principal };
type DeleteUserResult = variant { Ok : User; Err : DeleteUserErr };
type Recording = record {
  id : principal;
  audio : blob;
  name : text;
  created_at : nat64;
  user_id : principal;
};
type User = record {
  id : principal;
  recording_ids : vec principal;
  username : text;
  created_at : nat64;
};
service : () -> {
  create_recording : (blob, text, principal) -> (CreateRecordingResult);
  create_user : (text) -> (User);
  delete_recording : (principal) -> (DeleteRecordingResult);
  delete_user : (principal) -> (DeleteUserResult);
  read_recording_by_id : (principal) -> (opt Recording) query;
  read_recordings : () -> (vec Recording) query;
  read_user_by_id : (principal) -> (opt User) query;
  read_users : () -> (vec User) query;
}
